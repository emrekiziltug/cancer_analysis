'''
Created on Oct 17, 2019

@author: emrekiziltug
'''
def load():
    from sklearn.cluster import KMeans
    from scipy import stats
    import csv
    import numpy as np
    import pandas as pd
    import sys
    import matplotlib.pyplot as plt
    from scipy.stats import zscore
    from sklearn.decomposition import PCA
    
    "Load gene expression and pathway gene files"
    #input_example  = open("/Users/emrekiziltug/eclipse-newspace/kahlelab/example_c", 'r')
    input = open("/Users/emrekiziltug/eclipse-newspace/kahlelab/HiSeqV2", 'r')
    input_2  = open("/Users/emrekiziltug/eclipse-newspace/kahlelab/geneset.txt", 'r')
    input_3 = open("/Users/emrekiziltug/eclipse-newspace/kahlelab/fake_black_white_data_sample.txt", 'r')
    df = pd.read_csv(input,sep='\t')
    
    "Get the pathway genes from external file"
    df2 = pd.read_csv(input_2,sep='\t',skiprows=1)
    df_race = pd.read_csv(input_3,sep='\t')
    df_race= df_race.sort_values(by='Patient ID')
    print(df_race)
    genes = [item[0] for item in df2.values.tolist()]
    
    
    "Get rid of the genes not in the pathway"
    df3 = df[df['sample'].isin(genes)]
    
    "Calculate standard deviations"
    stds = pd.DataFrame(df3.std(axis=1))
    
    "Add the pathway genes to dataset"
    stds.insert(0, "genes", df3['sample'].tolist(), True)
    
    "Choose the most variable genes in the pathway"
    stds = stds.sort_values(ascending = False,by=0)
    n = int(len(stds)/10)
    stds = stds[:n]
    
    "Feature generation"
    features = stds['genes'].tolist()
    df4 = df3[df3['sample'].isin(features)]
    #print(df4.transpose()[1:].index)
    
    "Format for Kmeans"
    df4_array = stats.zscore(np.array(df4.transpose().values[1:], dtype=np.float64), axis=0)
    
    
    
    
    "Kmeans clustering"
    km = KMeans(n_clusters=2)
    km.fit(df4_array)
    y_kmeans = km.predict(df4_array)
    labels = km.labels_
    results = pd.DataFrame([df4.transpose()[1:].index,labels,df4_array]).T
    results =results.sort_values(by=0)
    
    
    "PCA transformation"
    pca = PCA(2)  
    pca = PCA(n_components=2)
    pca.fit(df4_array)
    df4_array_pca = pca.transform(df4_array)
    
    "Race analysis"
    results.insert(1, 'race', df_race['Race Category'].tolist(), True)
    summary = results.iloc[:,:-1]
    c1 = summary[summary[1]==1]
    bc1= c1[c1['race'] =="BLACK OR AFRICAN AMERICAN"] 
    wc1= c1[c1['race'] =="WHITE"]
    c2 = summary[summary[1]==0]
    bc2= c2[c2['race'] =="BLACK OR AFRICAN AMERICAN"]
    wc2= c2[c2['race'] =="WHITE"]
    print("black ratio in cluster 1:",len(bc1)/len(c1))
    print("black ratio in cluster 2:",len(bc2)/len(c2))
    
    #print(labels)
    
    "Plotting"
    plt.scatter(df4_array_pca[:, 0], df4_array_pca[:, 1],c=y_kmeans, s=50, cmap='viridis')  
    centers = km.cluster_centers_
    plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)
    plt.title('Scatter plot')
    plt.xlabel('PCA d1')
    plt.ylabel('PCA d2')
    plt.show()
    
    
   
    return 0

if __name__ == '__main__':
    load()
